# Generated from /home/hachi/Documents/DHS/DHS/compilador/src/main/python/compilador.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,163,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,3,9,87,8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,
        1,15,4,15,100,8,15,11,15,12,15,101,1,16,1,16,1,16,1,16,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,
        1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,
        1,22,3,22,137,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,
        3,24,148,8,24,1,24,1,24,1,24,5,24,153,8,24,10,24,12,24,156,9,24,
        1,25,1,25,1,25,1,25,1,26,1,26,0,0,27,1,0,3,0,5,1,7,2,9,3,11,4,13,
        5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,35,16,
        37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,1,0,4,2,0,
        65,90,97,122,1,0,48,57,2,0,60,60,62,62,3,0,9,10,13,13,32,32,172,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,
        55,1,0,0,0,3,57,1,0,0,0,5,59,1,0,0,0,7,61,1,0,0,0,9,63,1,0,0,0,11,
        65,1,0,0,0,13,67,1,0,0,0,15,69,1,0,0,0,17,71,1,0,0,0,19,86,1,0,0,
        0,21,88,1,0,0,0,23,90,1,0,0,0,25,92,1,0,0,0,27,94,1,0,0,0,29,96,
        1,0,0,0,31,99,1,0,0,0,33,103,1,0,0,0,35,107,1,0,0,0,37,114,1,0,0,
        0,39,117,1,0,0,0,41,122,1,0,0,0,43,126,1,0,0,0,45,136,1,0,0,0,47,
        138,1,0,0,0,49,147,1,0,0,0,51,157,1,0,0,0,53,161,1,0,0,0,55,56,7,
        0,0,0,56,2,1,0,0,0,57,58,7,1,0,0,58,4,1,0,0,0,59,60,5,40,0,0,60,
        6,1,0,0,0,61,62,5,41,0,0,62,8,1,0,0,0,63,64,5,123,0,0,64,10,1,0,
        0,0,65,66,5,125,0,0,66,12,1,0,0,0,67,68,5,59,0,0,68,14,1,0,0,0,69,
        70,5,61,0,0,70,16,1,0,0,0,71,72,5,44,0,0,72,18,1,0,0,0,73,87,7,2,
        0,0,74,75,5,61,0,0,75,87,5,61,0,0,76,77,5,60,0,0,77,87,5,61,0,0,
        78,79,5,62,0,0,79,87,5,61,0,0,80,81,5,33,0,0,81,87,5,61,0,0,82,83,
        5,38,0,0,83,87,5,38,0,0,84,85,5,124,0,0,85,87,5,124,0,0,86,73,1,
        0,0,0,86,74,1,0,0,0,86,76,1,0,0,0,86,78,1,0,0,0,86,80,1,0,0,0,86,
        82,1,0,0,0,86,84,1,0,0,0,87,20,1,0,0,0,88,89,5,43,0,0,89,22,1,0,
        0,0,90,91,5,45,0,0,91,24,1,0,0,0,92,93,5,42,0,0,93,26,1,0,0,0,94,
        95,5,47,0,0,95,28,1,0,0,0,96,97,5,37,0,0,97,30,1,0,0,0,98,100,3,
        3,1,0,99,98,1,0,0,0,100,101,1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,
        0,102,32,1,0,0,0,103,104,5,105,0,0,104,105,5,110,0,0,105,106,5,116,
        0,0,106,34,1,0,0,0,107,108,5,100,0,0,108,109,5,111,0,0,109,110,5,
        117,0,0,110,111,5,98,0,0,111,112,5,108,0,0,112,113,5,101,0,0,113,
        36,1,0,0,0,114,115,5,105,0,0,115,116,5,102,0,0,116,38,1,0,0,0,117,
        118,5,101,0,0,118,119,5,108,0,0,119,120,5,115,0,0,120,121,5,101,
        0,0,121,40,1,0,0,0,122,123,5,102,0,0,123,124,5,111,0,0,124,125,5,
        114,0,0,125,42,1,0,0,0,126,127,5,119,0,0,127,128,5,104,0,0,128,129,
        5,105,0,0,129,130,5,108,0,0,130,131,5,101,0,0,131,44,1,0,0,0,132,
        133,5,43,0,0,133,137,5,43,0,0,134,135,5,45,0,0,135,137,5,45,0,0,
        136,132,1,0,0,0,136,134,1,0,0,0,137,46,1,0,0,0,138,139,5,114,0,0,
        139,140,5,101,0,0,140,141,5,116,0,0,141,142,5,117,0,0,142,143,5,
        114,0,0,143,144,5,110,0,0,144,48,1,0,0,0,145,148,3,1,0,0,146,148,
        5,95,0,0,147,145,1,0,0,0,147,146,1,0,0,0,148,154,1,0,0,0,149,153,
        3,1,0,0,150,153,3,3,1,0,151,153,5,95,0,0,152,149,1,0,0,0,152,150,
        1,0,0,0,152,151,1,0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,
        1,0,0,0,155,50,1,0,0,0,156,154,1,0,0,0,157,158,7,3,0,0,158,159,1,
        0,0,0,159,160,6,25,0,0,160,52,1,0,0,0,161,162,9,0,0,0,162,54,1,0,
        0,0,7,0,86,101,136,147,152,154,1,6,0,0
    ]

class compiladorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PA = 1
    PC = 2
    LLA = 3
    LLC = 4
    PYC = 5
    ASIG = 6
    COMA = 7
    OPERADORES = 8
    SUMA = 9
    RESTA = 10
    MULT = 11
    DIV = 12
    MOD = 13
    NUMERO = 14
    INT = 15
    DOUBLE = 16
    IF = 17
    ELSE = 18
    FOR = 19
    WHILE = 20
    INCDEC = 21
    RETURN = 22
    ID = 23
    WS = 24
    OTRO = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "'='", "','", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'int'", "'double'", "'if'", "'else'", 
            "'for'", "'while'", "'return'" ]

    symbolicNames = [ "<INVALID>",
            "PA", "PC", "LLA", "LLC", "PYC", "ASIG", "COMA", "OPERADORES", 
            "SUMA", "RESTA", "MULT", "DIV", "MOD", "NUMERO", "INT", "DOUBLE", 
            "IF", "ELSE", "FOR", "WHILE", "INCDEC", "RETURN", "ID", "WS", 
            "OTRO" ]

    ruleNames = [ "LETRA", "DIGITO", "PA", "PC", "LLA", "LLC", "PYC", "ASIG", 
                  "COMA", "OPERADORES", "SUMA", "RESTA", "MULT", "DIV", 
                  "MOD", "NUMERO", "INT", "DOUBLE", "IF", "ELSE", "FOR", 
                  "WHILE", "INCDEC", "RETURN", "ID", "WS", "OTRO" ]

    grammarFileName = "compilador.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


