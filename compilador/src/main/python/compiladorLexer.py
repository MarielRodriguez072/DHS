# Generated from /home/hachi/Documents/DHS/DHS/compilador/src/main/python/compilador.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,24,154,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,85,
        8,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,4,15,
        98,8,15,11,15,12,15,99,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,3,22,135,
        8,22,1,23,1,23,3,23,139,8,23,1,23,1,23,1,23,5,23,144,8,23,10,23,
        12,23,147,9,23,1,24,1,24,1,24,1,24,1,25,1,25,0,0,26,1,0,3,0,5,1,
        7,2,9,3,11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,
        14,33,15,35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,1,
        0,4,2,0,65,90,97,122,1,0,48,57,2,0,60,60,62,62,3,0,9,10,13,13,32,
        32,163,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,1,0,
        0,0,3,55,1,0,0,0,5,57,1,0,0,0,7,59,1,0,0,0,9,61,1,0,0,0,11,63,1,
        0,0,0,13,65,1,0,0,0,15,67,1,0,0,0,17,69,1,0,0,0,19,84,1,0,0,0,21,
        86,1,0,0,0,23,88,1,0,0,0,25,90,1,0,0,0,27,92,1,0,0,0,29,94,1,0,0,
        0,31,97,1,0,0,0,33,101,1,0,0,0,35,105,1,0,0,0,37,112,1,0,0,0,39,
        115,1,0,0,0,41,120,1,0,0,0,43,124,1,0,0,0,45,134,1,0,0,0,47,138,
        1,0,0,0,49,148,1,0,0,0,51,152,1,0,0,0,53,54,7,0,0,0,54,2,1,0,0,0,
        55,56,7,1,0,0,56,4,1,0,0,0,57,58,5,40,0,0,58,6,1,0,0,0,59,60,5,41,
        0,0,60,8,1,0,0,0,61,62,5,123,0,0,62,10,1,0,0,0,63,64,5,125,0,0,64,
        12,1,0,0,0,65,66,5,59,0,0,66,14,1,0,0,0,67,68,5,61,0,0,68,16,1,0,
        0,0,69,70,5,44,0,0,70,18,1,0,0,0,71,85,7,2,0,0,72,73,5,61,0,0,73,
        85,5,61,0,0,74,75,5,60,0,0,75,85,5,61,0,0,76,77,5,62,0,0,77,85,5,
        61,0,0,78,79,5,33,0,0,79,85,5,61,0,0,80,81,5,38,0,0,81,85,5,38,0,
        0,82,83,5,124,0,0,83,85,5,124,0,0,84,71,1,0,0,0,84,72,1,0,0,0,84,
        74,1,0,0,0,84,76,1,0,0,0,84,78,1,0,0,0,84,80,1,0,0,0,84,82,1,0,0,
        0,85,20,1,0,0,0,86,87,5,43,0,0,87,22,1,0,0,0,88,89,5,45,0,0,89,24,
        1,0,0,0,90,91,5,42,0,0,91,26,1,0,0,0,92,93,5,47,0,0,93,28,1,0,0,
        0,94,95,5,37,0,0,95,30,1,0,0,0,96,98,3,3,1,0,97,96,1,0,0,0,98,99,
        1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,32,1,0,0,0,101,102,5,105,
        0,0,102,103,5,110,0,0,103,104,5,116,0,0,104,34,1,0,0,0,105,106,5,
        100,0,0,106,107,5,111,0,0,107,108,5,117,0,0,108,109,5,98,0,0,109,
        110,5,108,0,0,110,111,5,101,0,0,111,36,1,0,0,0,112,113,5,105,0,0,
        113,114,5,102,0,0,114,38,1,0,0,0,115,116,5,101,0,0,116,117,5,108,
        0,0,117,118,5,115,0,0,118,119,5,101,0,0,119,40,1,0,0,0,120,121,5,
        102,0,0,121,122,5,111,0,0,122,123,5,114,0,0,123,42,1,0,0,0,124,125,
        5,119,0,0,125,126,5,104,0,0,126,127,5,105,0,0,127,128,5,108,0,0,
        128,129,5,101,0,0,129,44,1,0,0,0,130,131,5,43,0,0,131,135,5,43,0,
        0,132,133,5,45,0,0,133,135,5,45,0,0,134,130,1,0,0,0,134,132,1,0,
        0,0,135,46,1,0,0,0,136,139,3,1,0,0,137,139,5,95,0,0,138,136,1,0,
        0,0,138,137,1,0,0,0,139,145,1,0,0,0,140,144,3,1,0,0,141,144,3,3,
        1,0,142,144,5,95,0,0,143,140,1,0,0,0,143,141,1,0,0,0,143,142,1,0,
        0,0,144,147,1,0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,48,1,0,0,
        0,147,145,1,0,0,0,148,149,7,3,0,0,149,150,1,0,0,0,150,151,6,24,0,
        0,151,50,1,0,0,0,152,153,9,0,0,0,153,52,1,0,0,0,7,0,84,99,134,138,
        143,145,1,6,0,0
    ]

class compiladorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PA = 1
    PC = 2
    LLA = 3
    LLC = 4
    PYC = 5
    ASIG = 6
    COMA = 7
    OPERADORES = 8
    SUMA = 9
    RESTA = 10
    MULT = 11
    DIV = 12
    MOD = 13
    NUMERO = 14
    INT = 15
    DOUBLE = 16
    IF = 17
    ELSE = 18
    FOR = 19
    WHILE = 20
    INCDEC = 21
    ID = 22
    WS = 23
    OTRO = 24

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "';'", "'='", "','", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'int'", "'double'", "'if'", "'else'", 
            "'for'", "'while'" ]

    symbolicNames = [ "<INVALID>",
            "PA", "PC", "LLA", "LLC", "PYC", "ASIG", "COMA", "OPERADORES", 
            "SUMA", "RESTA", "MULT", "DIV", "MOD", "NUMERO", "INT", "DOUBLE", 
            "IF", "ELSE", "FOR", "WHILE", "INCDEC", "ID", "WS", "OTRO" ]

    ruleNames = [ "LETRA", "DIGITO", "PA", "PC", "LLA", "LLC", "PYC", "ASIG", 
                  "COMA", "OPERADORES", "SUMA", "RESTA", "MULT", "DIV", 
                  "MOD", "NUMERO", "INT", "DOUBLE", "IF", "ELSE", "FOR", 
                  "WHILE", "INCDEC", "ID", "WS", "OTRO" ]

    grammarFileName = "compilador.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


